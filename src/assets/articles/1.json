{
	"title": "不回国就是赌一个未来",
	"subtitle": "To be or not to be",
	"paragraghs":[ 

		"<p class=\"blockquo\">国内现在的繁荣是一种人口红利的繁荣，因为人口众多而组成了这个世界上最广阔的市场，",
		"随便单拉一个小市场出来就抵欧洲一个小国。确实交易会带来财富，会让很多人发财，人所处的社会也会越来越发达，形成良性的循环————不过得在政府的良性监督下。",
		"可中国政府在很多方面是没有起到很好的引导作用的，倒不是说全是坏的引导，而是中国人太聪明了，各种钻空子，又加上政府实际是党的政府，而党却一直在假大空的道路上越走越远，",
		"这就让人有种魔幻的感觉，没人会脚踏实地的干事情。这就是我认为的从根上是坏了，基础是没打好的，而我的计算机学习生涯教会我，基础才是一切的根本，",
		"我所学的东西真的是从简简单单的基础堆建起来的，我着迷于如此简单而又有效的过程，也深深体会到如果基础上有一点儿差池，那么最后导致的将是整个大厦的崩溃。</p>",

		"<p>所以我对我家乡的未来是悲观的，我的家乡是3线小县城，紧靠省会。出国前感觉这里蛮好，特清静，当时甚至有留在这里的感觉。",
		"但出国几年再回去，发现这里也变了，各种高楼开始建起，人也越来越多，街容几经变化。我就意识到，一个地方是不会停滞的，它只会奔向更高级的形态，但这个过程将会无比痛苦。",
		"所以说理想中，所有的城市，乡村都会慢慢发展到上海、北京这个状态，倒不是说那些高楼大厦，而是人口素质，基础设施，人民财力等。但是我发现国内因为政府的权力，",
		"导致大城市永远会发展，而3线城市只能眼睁睁的看着自己的人才流失。这对未来的影响就是，大城市最终会形成围城，中国内部就会出现国际上才有的景象：一些国家富的流油，而旁边的国家却穷的发慌。",
		"在国际上尚有国家这个概念来组织这些财富的流失，可一个国家内部的话，我觉得最终是会倾覆的，这是不公平的，",
		"况且我的家乡是属于贫穷的那一侧。所以我留在国外就是赌30年后，家乡在国内的境遇，与30年后，我自己身处的国外的家乡的境遇哪个更好。我目前的观点是，我现在自己开辟的地方会更让我满意，所以，我决定留下来。</p>",
		"<h1>Clean Code -- Robert C. Martin</h1>",
		"<h2>Introduction</h2>",
		"<p>这本书分为三个大部分：</p>",
		"<ol>",
		"   <li>基本的概念，知识；</li>",
		"   <li>练习成就大师；</li>",
		"   <li>payoff，回报。</li>",
		"</ol>",
		"<h2>Chapter 1: Clean Code </h2>",
		"<h3>There will be code</h3>",
		"<p>Code 是不可能被取代的，很多人觉得有一天代码可能不需要再需要专门的人来写出来，因为会自动化，我们只需要关注需求就好——不对！因为有些需求永远无法被抽象化，它们需要被具体实现，而这个具体实现，就是编程（programming）。</p>",
		"<h3>Bad Code</h3>",
		"<p>作者用一个例子来说明bad code会造成巨大的伤害：曾经的80年代有一个killer app，结果经过了几次产品迭代，竟每况愈下，最后公司倒闭。后来作者碰到了当年的一个员工，问了他当时发生了什么，而他的回答也正好印证了作者的想法：当年他们因为匆忙把app推出，结果导致产品的code非常混乱，以至于后来不停的增加feature而使这个产品无法维护，最总导致他的崩溃。</p>",
		"<h3>The Total Cost of Owning a Mess</h3>",
		"<p>坏的code就是你（程序员）产出的，不是别人，不要把别人（PM）的要求说成你犯错的理由，他们对于日程表的专注等同于你对于好的代码的专注，这样的你才是专业的。只有真正的好代码，整洁的代码才能帮你度过dead line，而不是紧急产出的杂乱的代码。</p>",
		"<h3>What is Clean Code</h3>",
		"<blockquote>",
		"<p>elegant and efficient, clean code <a href=\"#\">does</a> one thing well</p>",
		"<p>simple and direct. Clean code reads like well-written prose.</p>",
		"<p>Clean code acn be read, and enhanced by a developer other than its original author... It has meaningful names. It has minimal dependencies. </p>",
		"</blockquote>",
		"<h2>Chapter 2: Meaningful Names</h2>",
		"<h3>Use Intention-Revealing Names</h3>",
		"<p>名字即意图，一个好名字就要传达出他所要完成的意图。</p>",
		"<h3>Avoid Disinformation</h3>",
		"<ol>",
		"<li>名字长度过长可能会导致无效的误导，特别是两个比较相近的两个名字比较长时。</li>",
		"<li>不要用小写的&quot;L&quot;，大写的&quot;O&quot;，很容易误导。</li>",
		"<li>不要在一个变量声明中用List，List是一个非常特殊的词，容易形成误导。</li>",
		"</ol>",
		"<h3>Make Meaningful Distinctions</h3>",
		"<p>名字要有意义的区分。</p>",
		"<h3>Use Pronounceable Names</h3>",
		"<p>人类善于运用语言，不要浪费人类发音的这一特点，造出来的名字要可以轻松得让读者读出来。</p>",
		"<pre><code class=\"java\">class DtaRcrd102 {",
		"private Date genymdhms;",
		"private Date modymdhms;",
		"private final String pszqint = &quot;102&quot;;",
		"/* ... */",
		"};",
		"</code></pre>",
		"<p>应该转换为：</p>",
		"<pre><code>class Customer {",
		"private Date generationTimestamp;",
		"private Date modificationTimestamp;",
		"private final String recordId = &quot;102&quot;;",
		"};",
		"</code></pre>",
		"<p>这本书分为三个大部分：</p>",
		"<ol>",
		"\t<li>基本的概念，知识；</li>",
		"  <li>练习成就大师；</li>",
		"  <li>payoff，回报。</li>",
		"</ol>",
		"<h2>Chapter 1: Clean Code </h2>",
		"<p>应该转换为：</p>",
"<pre><code>class Customer {",
"  private Date generationTimestamp;",
"  private Date modificationTimestamp;",
"  private final String recordId = &quot;102&quot;;",
"};"
	]	
}